{
  
    
        "post0": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a ‚Äúlevel 1 heading‚Äù in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here‚Äôs a footnote 1. Here‚Äôs a horizontal rule: . . Lists . Here‚Äôs a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes ‚Ä¶and‚Ä¶ . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote.¬†&#8617; . |",
            "url": "https://parulnith.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " ‚Ä¢ Jan 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "The curious case of Simpson‚Äôs Paradox",
            "content": "The curious case of Simpson‚Äôs Paradox . Statistical tests and analysis can be confounded by a simple misunderstanding of the data . . Statistics rarely offers a single ‚Äúright‚Äùway of doing anything ‚Äî Charles Wheelan in Naked Statistics . In 1996, [Appleton, French, and Vanderpump](https://www.researchgate.net/publication/254331089_Ignoring_a_Covariate_An_Example_of_Simpson‚Äôs_Paradox) conducted an experiment to study the effect of smoking on a sample of people. The study was conducted over twenty years and included 1314 English women. Contrary to the common belief, this study showed that Smokers tend to live longer than non-smokers. Even though I am not an expert on the effects of smoking on human health, this finding is disturbing. The graph below shows that smokers had a mortality rate of 23%, while for non-smokers, it was around 31%. . ![The mortality rate of smokers vs. non-smokers | Image by Author](https://cdn-images-1.medium.com/max/2000/1*iDyNS-0t3aqoMWNOY5ySfQ.png) | . Now, here‚Äôs where the things get interesting. On breaking the same data by age group, we get an entirely different picture. The results show that in most age groups, smokers have a high mortality rate compared to non-smokers. . ![Results of the study broken down by age group | Image by Author](https://cdn-images-1.medium.com/max/2000/1*a_7T9kLqig2uLxiikgnetw.png) | . So why the confusion?ü§î . Well, the phenomenon that we just saw above is a classic case of Simpson‚Äôs paradox, which from time to makes way into a lot of data-driven analysis. In this article, we‚Äôll look a little deeper into it and understand how to avoid fallacies like these in our analysis. . Simpson‚Äôs Paradox: Things aren‚Äôt always as they seem . . As per Wikipedia, Simpson‚Äôs paradox, **also called the **Yule-Simpson effect, can be defined as follows: . Simpson‚Äôs Paradox is a phenomenon in probability and statistics, in which a trend appears in several different groups of data but disappears or reverses when these groups are combined. . In other words, the same data set can appear to show opposite trends depending on how it‚Äôs grouped. This is exactly what we saw in the smokers vs. non-smokers mortality rate example. When grouped age-wise, the data shows that non-smokers tend to live longer. But when we see an overall picture, smokers tend to live longer. So what is exactly happening here? Why are there different interpretations of the same data, and what is evading our eye in the first case? Well, The culprit, in this case, is called the Lurking variable ‚Äî a conditional variable **that can affect our conclusions about the relationship between two variables ‚Äî smoking and mortality in our case. . Identifying the Lurking variable üîç . . Lurking means to be present in a latent or barely discernible state, although still having an effect. In the same way, a lurking variable is a variable that isn‚Äôt included in the analysis but, if included, can considerably change the outcome of the analysis. . The **age groups **are the lurking variable in the example discussed. When the data were grouped by age, we saw that the non-smokers were significantly older on average, and thus, more likely to die during the trial period, precisely because they were living longer in general. . Try it out for yourself. üíª . Here is another example where the effect of Simpson‚Äôs Paradox is easily visible. We all are aware of the [Palmer Penguins ](https://allisonhorst.github.io/palmerpenguins/articles/intro.html)üêß dataset ‚Äî the drop-in replacement for the famous iris dataset. The dataset consists of details about three species of penguins, including their culmen length and depth, their flipper length, body mass, and sex. The culmen is essentially the upper ridge of a penguin‚Äôs beak, while their wings are called flippers. The dataset is available for download on Kaggle. . ![Nature vector created by brgfx ‚Äî www.freepik.com | Attribution 1.0 Generic (CC BY 1.0)](https://cdn-images-1.medium.com/max/2000/1*gIOJSSoVH7i0GyOAtV0ZfA.jpeg) | . Importing the necessary libraries and the dataset . import pandas as pd import seaborn as sns from scipy import stats import matplotlib.pyplot as plt %matplotlib inline #plt.rcParams[&#39;figure.figsize&#39;] = 12, 10 plt.style.use(&quot;fivethirtyeight&quot;)# for pretty graphs df = pd.read_csv(&#39;[penguins_size.csv&#39;](https://raw.githubusercontent.com/parulnith/Website-articles-datasets/master/penguins_size.csv&#39;)) df.head()&#39;) df.info() . . There are few missing values in the dataset. Let‚Äôs get rid of those. . df = df.dropna() . Let‚Äôs now visualize the relationship between the culmen length of the penguins vs. their culmen depth. We‚Äôll use seaborn‚Äôs lmplot method (where ‚Äúlm‚Äù stands for ‚Äúlinear model‚Äù)for the same. . ![Culmen length vs. culmen depth of the penguins | Image by Author](https://cdn-images-1.medium.com/max/2000/1*pI8zh6NZE_JV262dcpv-iA.png) | . Here we see a negative association between culmen length and culmen depth for the data set. The results above demonstrate that the longer the culmen or the beak, the less dense it is. We have also calculated the correlation coefficient between the two columns to view the negative association using the Pearson correlation coefficient(PCC), referred to as *Pearson‚Äôs *r. The PCC **is a number between -1 and 1 and measures the linear correlation between two data sets. The Scipy library provides a method called pearsonr() for the same. . Drilling down at Species level . When you drill down further and group the data species-wise, the findings reverse. The ‚Äòhue‚Äô parameter determines which column in the data frame should be used for color encoding. . sns.lmplot(x **=** &#39;culmen_length_mm&#39;,y **=** &#39;culmen_depth_mm&#39;, data **=** df, hue **=** &#39;species&#39;) . ![Culmen length vs. culmen depth of the penguins grouped by species | Image by Author](https://cdn-images-1.medium.com/max/2000/1*7y1G5oTdu1Lc9tdaSNwCng.png) | . Voila! What we have is a classic example of Simpson‚Äôs effect. While the culmen‚Äôs length and depth were negatively associated on a group level, the species level data exhibits an opposite association. Thus the type of species is a lurking variable here. We can also see the person‚Äôs coefficient for each of the species using the code below: . . . . Here is the nbviewer link to the notebook incase you want to follow along. . Tools to discover Simpson‚Äôs effect üõ† . Detecting Simpson‚Äôs effect in a dataset can be tricky and requires some careful observation and analysis. However, since this issue pops up from time to time in the statistical world, few tools have been created to help us deal with it. A paper titled ‚ÄúUsing Simpson‚Äôs Paradox to Discover Interesting Patterns in Behavioral Data.‚Äù was released in 2018, highlighting a data-driven discovery method that leverages Simpson‚Äôs paradox to uncover interesting patterns in behavioral data. *The method systematically disaggregates data to identify subgroups within a population whose behavior deviates significantly from the rest of the population. *It is a great read and also has the link to the code. . Conclusion . Data comes with a lot of power and can be easily manipulated to suit our needs and objectives. There are multiple ways of aggregating and grouping data. Depending upon how it is grouped, the data may offer confounding results. It is up to us to carefully assess all the details using the statistical tools and look for lurking variables that might affect our decisions and outcomes. .",
            "url": "https://parulnith.github.io/blog/statistics/2020/01/14/test-markdown-post-copy.html",
            "relUrl": "/statistics/2020/01/14/test-markdown-post-copy.html",
            "date": " ‚Ä¢ Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi! I‚Äôm Parul and I work at H2O.ai .",
          "url": "https://parulnith.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "Hi! I‚Äôm Parul and I work at H2O.ai .",
          "url": "https://parulnith.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://parulnith.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}